{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "PutUsersLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "putUsers",
        "Handler": "index.handler",
        "Runtime": "nodejs16.x",
        "Role": {
          "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const AWS = require('aws-sdk');",
                "const docClient = new AWS.DynamoDB.DocumentClient();",
                "const sns = new AWS.SNS();",
                "const TABLE_NAME = 'Users';",
                "const TOPIC_ARN = 'arn:aws:sns:us-east-1:286801031611:FlightBookingTopic';",
                "",
                "exports.handler = async (event) => {",
                "  try {",
                "    const body = JSON.parse(event.body);",
                "    const { email, flightId, class: flightClass, passengers, price } = body;",
                "",
                "    if (!email || !flightId || !flightClass || !passengers || !price) {",
                "      return { statusCode: 400, body: JSON.stringify({ error: 'Missing fields' }) };",
                "    }",
                "",
                "    const newBooking = `${flightId} (${passengers}Adults-${flightClass}-${Number(price).toFixed(2)})`;",
                "",
                "    await docClient.update({",
                "      TableName: TABLE_NAME,",
                "      Key: { email },",
                "      UpdateExpression: 'SET bookedFlights = list_append(if_not_exists(bookedFlights, :empty), :new)',",
                "      ExpressionAttributeValues: {",
                "        ':new': [newBooking],",
                "        ':empty': []",
                "      }",
                "    }).promise();",
                "",
                "    await sns.subscribe({",
                "      TopicArn: TOPIC_ARN,",
                "      Protocol: 'email',",
                "      Endpoint: email",
                "    }).promise();",
                "",
                "    await sns.publish({",
                "      TopicArn: TOPIC_ARN,",
                "      Message: `Hello,\\n\\nYour flight has been successfully booked!\\nFlight ID: ${flightId}`,",
                "      Subject: 'CloudTrip \u2013 Flight Booking Confirmation'",
                "    }).promise();",
                "",
                "    return {",
                "      statusCode: 200,",
                "      headers: { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json' },",
                "      body: JSON.stringify({ message: 'User updated and email notification sent', newBooking })",
                "    };",
                "",
                "  } catch (err) {",
                "    console.error('\u274c Error updating user or sending email:', err);",
                "    return {",
                "      statusCode: 500,",
                "      headers: { 'Access-Control-Allow-Origin': '*' },",
                "      body: JSON.stringify({ error: err.message || 'Internal error' })",
                "    };",
                "  }",
                "};"
              ]
            ]
          }
        }
      }
    }
  },
  "Outputs": {
    "LambdaFunctionName": {
      "Description": "Lambda Function Name",
      "Value": { "Ref": "PutUsersLambda" }
    },
    "LambdaFunctionArn": {
      "Description": "Lambda ARN",
      "Value": { "Fn::GetAtt": [ "PutUsersLambda", "Arn" ] }
    }
  }
}
