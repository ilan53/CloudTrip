{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "StaticWebsiteBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "cloudtrip3",
        "WebsiteConfiguration": {
          "IndexDocument": "index.html",
          "ErrorDocument": "index.html"
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [ "*" ],
              "AllowedMethods": [ "GET", "PUT", "POST" ],
              "AllowedOrigins": [
                "https://czohwpuhzi.execute-api.us-east-1.amazonaws.com/prod",
                "http://cloudtrip3.s3.us-east-1.amazonaws.com"
              ]
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": false,
          "IgnorePublicAcls": false,
          "BlockPublicPolicy": false,
          "RestrictPublicBuckets": false
        }
      }
    },

    "BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": { "Ref": "StaticWebsiteBucket" },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "PublicReadGetObject",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    { "Ref": "StaticWebsiteBucket" },
                    "/*"
                  ]
                ]
              }
            }
          ]
        }
      }
    },


    "Flights": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Flights",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      }
    },
    "Users": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Users",
        "AttributeDefinitions": [
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "email",
            "KeyType": "HASH"
          }
        ],
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      }
    },


    "GetFlightsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "getFlights",
        "Handler": "index.handler",
        "Runtime": "nodejs16.x",
        "Role": {
          "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const AWS = require('aws-sdk');",
                "const docClient = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = 'Flights';",
                "",
                "exports.handler = async () => {",
                "  try {",
                "    const result = await docClient.scan({ TableName: TABLE_NAME }).promise();",
                "    return {",
                "      statusCode: 200,",
                "      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },",
                "      body: JSON.stringify(result.Items)",
                "    };",
                "  } catch (err) {",
                "    console.error(err);",
                "    return {",
                "      statusCode: 500,",
                "       headers: {'Access-Control-Allow-Origin': '*'},",
                "      body: JSON.stringify({ error: 'Internal Server Error' })",
                "    };",
                "  }",
                "};"
              ]
            ]
          }
        }
      }
    },
    "PutFlightsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "putFlights",
        "Handler": "index.handler",
        "Runtime": "nodejs16.x",
        "Role": {
          "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const AWS = require('aws-sdk');",
                "const docClient = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = 'Flights';",
                "",
                "exports.handler = async (event) => {",
                "  try {",
                "    const updatedFlight = JSON.parse(event.body);",
                "    await docClient.put({",
                "      TableName: TABLE_NAME,",
                "      Item: updatedFlight",
                "    }).promise();",
                "    return {",
                "      statusCode: 200,",
                "      headers: {",
                "        'Content-Type': 'application/json',",
                "        'Access-Control-Allow-Origin': '*'",
                "      },",
                "      body: JSON.stringify({ message: 'Flight updated successfully' })",
                "    };",
                "  } catch (err) {",
                "    console.error(err);",
                "    return {",
                "      statusCode: 500,",
                "      headers: { 'Access-Control-Allow-Origin': '*' },",
                "      body: JSON.stringify({ error: 'Internal Server Error' })",
                "    };",
                "  }",
                "};"
              ]
            ]
          }
        }
      }
    },
    "PostFlightsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "postFlights",
        "Handler": "index.handler",
        "Runtime": "nodejs16.x",
        "Role": {
          "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const AWS = require('aws-sdk');",
                "const docClient = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = 'Flights';",
                "",
                "exports.handler = async (event) => {",
                "  try {",
                "    const flight = JSON.parse(event.body);",
                "    const id = `${flight.flightNumber}-${flight.date}-${flight.time}`;",
                "    const item = { ...flight, id };",
                "    await docClient.put({ TableName: TABLE_NAME, Item: item }).promise();",
                "    return {",
                "      statusCode: 200,",
                "      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },",
                "      body: JSON.stringify({ message: 'Flight added successfully', id })",
                "    };",
                "  } catch (err) {",
                "    console.error(err);",
                "    return {",
                "      statusCode: 500,",
                "      headers: { 'Access-Control-Allow-Origin': '*' },",
                "      body: JSON.stringify({ error: 'Internal Server Error' })",
                "    };",
                "  }",
                "};"
              ]
            ]
          }
        }
      }
    },
    "DeleteFlightsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "deleteFlights",
        "Handler": "index.handler",
        "Runtime": "nodejs16.x",
        "Role": {
          "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const AWS = require('aws-sdk');",
                "const docClient = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = 'Flights';",
                "",
                "exports.handler = async (event) => {",
                "  try {",
                "    let id;",
                "    if (event.pathParameters && event.pathParameters.id) {",
                "      id = event.pathParameters.id;",
                "    } else {",
                "      const body = JSON.parse(event.body || '{}');",
                "      id = body.id;",
                "    }",
                "",
                "    if (!id) throw new Error('Missing flight ID');",
                "",
                "    await docClient.delete({",
                "      TableName: TABLE_NAME,",
                "      Key: { id }",
                "    }).promise();",
                "",
                "    return {",
                "      statusCode: 200,",
                "      headers: {",
                "        'Content-Type': 'application/json',",
                "        'Access-Control-Allow-Origin': '*'",
                "      },",
                "      body: JSON.stringify({ message: 'Flight deleted successfully', id })",
                "    };",
                "  } catch (err) {",
                "    console.error(err);",
                "    return {",
                "      statusCode: 500,",
                "      headers: { 'Access-Control-Allow-Origin': '*' },",
                "      body: JSON.stringify({ error: err.message || 'Internal Server Error' })",
                "    };",
                "  }",
                "};"
              ]
            ]
          }
        }
      }
    },


    "GetUsersLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "getUsers",
        "Handler": "index.handler",
        "Runtime": "nodejs16.x",
        "Role": {
          "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const AWS = require('aws-sdk');",
                "const docClient = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = 'Users';",
                "",
                "exports.handler = async () => {",
                "  try {",
                "    const result = await docClient.scan({ TableName: TABLE_NAME }).promise();",
                "    return {",
                "      statusCode: 200,",
                "      headers: {",
                "        'Content-Type': 'application/json',",
                "        'Access-Control-Allow-Origin': '*'",
                "      },",
                "      body: JSON.stringify(result.Items)",
                "    };",
                "  } catch (err) {",
                "    console.error(err);",
                "    return {",
                "      statusCode: 500,",
                "      headers: { 'Access-Control-Allow-Origin': '*' },",
                "      body: JSON.stringify({ error: err.message || 'Internal Server Error' })",
                "    };",
                "  }",
                "};"
              ]
            ]
          }
        }
      }
    },

    "PutUsersLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "putUsers",
        "Handler": "index.handler",
        "Runtime": "nodejs16.x",
        "Role": {
          "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const AWS = require('aws-sdk');",
                "const docClient = new AWS.DynamoDB.DocumentClient();",
                "const sns = new AWS.SNS();",
                "const TABLE_NAME = 'Users';",
                "const TOPIC_ARN = 'arn:aws:sns:us-east-1:286801031611:FlightBookingTopic';",
                "",
                "exports.handler = async (event) => {",
                "  try {",
                "    const body = JSON.parse(event.body);",
                "    const { email, flightId, class: flightClass, passengers, price } = body;",
                "",
                "    if (!email || !flightId || !flightClass || !passengers || !price) {",
                "      return { statusCode: 400, body: JSON.stringify({ error: 'Missing fields' }) };",
                "    }",
                "",
                "    const newBooking = `${flightId} (${passengers}Adults-${flightClass}-${Number(price).toFixed(2)})`;",
                "",
                "    await docClient.update({",
                "      TableName: TABLE_NAME,",
                "      Key: { email },",
                "      UpdateExpression: 'SET bookedFlights = list_append(if_not_exists(bookedFlights, :empty), :new)',",
                "      ExpressionAttributeValues: {",
                "        ':new': [newBooking],",
                "        ':empty': []",
                "      }",
                "    }).promise();",
                "",
                "    await sns.subscribe({",
                "      TopicArn: TOPIC_ARN,",
                "      Protocol: 'email',",
                "      Endpoint: email",
                "    }).promise();",
                "",
                "    await sns.publish({",
                "      TopicArn: TOPIC_ARN,",
                "      Message: `Hello,\\n\\nYour flight has been successfully booked!\\nFlight ID: ${flightId}`,",
                "      Subject: 'CloudTrip \u2013 Flight Booking Confirmation'",
                "    }).promise();",
                "",
                "    return {",
                "      statusCode: 200,",
                "      headers: { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json' },",
                "      body: JSON.stringify({ message: 'User updated and email notification sent', newBooking })",
                "    };",
                "",
                "  } catch (err) {",
                "    console.error('\u274c Error updating user or sending email:', err);",
                "    return {",
                "      statusCode: 500,",
                "      headers: { 'Access-Control-Allow-Origin': '*' },",
                "      body: JSON.stringify({ error: err.message || 'Internal error' })",
                "    };",
                "  }",
                "};"
              ]
            ]
          }
        }
      }
    },

    "DeleteUserBookingLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "deleteUserBooking",
        "Handler": "index.handler",
        "Runtime": "nodejs16.x",
        "Role": {
          "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const AWS = require('aws-sdk');",
                "const docClient = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = 'Users';",
                "",
                "exports.handler = async (event) => {",
                "  try {",
                "    const body = JSON.parse(event.body);",
                "    const { email, index } = body;",
                "",
                "    if (!email || index === undefined) {",
                "      return { statusCode: 400, body: JSON.stringify({ error: 'Missing email or index' }) };",
                "    }",
                "",
                "    const user = await docClient.get({ TableName: TABLE_NAME, Key: { email } }).promise();",
                "    const bookings = user.Item?.bookedFlights || [];",
                "",
                "    if (index < 0 || index >= bookings.length) {",
                "      return { statusCode: 400, body: JSON.stringify({ error: 'Invalid index' }) };",
                "    }",
                "",
                "    bookings.splice(index, 1);",
                "",
                "    await docClient.update({",
                "      TableName: TABLE_NAME,",
                "      Key: { email },",
                "      UpdateExpression: 'SET bookedFlights = :updated',",
                "      ExpressionAttributeValues: { ':updated': bookings }",
                "    }).promise();",
                "",
                "    return {",
                "      statusCode: 200,",
                "      headers: { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json' },",
                "      body: JSON.stringify({ message: 'Booking deleted successfully' })",
                "    };",
                "  } catch (err) {",
                "    console.error('\u274c Error deleting booking:', err);",
                "    return {",
                "      statusCode: 500,",
                "      headers: { 'Access-Control-Allow-Origin': '*' },",
                "      body: JSON.stringify({ error: err.message || 'Internal Server Error' })",
                "    };",
                "  }",
                "};"
              ]
            ]
          }
        }
      }
    },

    "UserPoolTriggerLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "CognitoUserToDynamo",
        "Handler": "index.handler",
        "Runtime": "nodejs18.x",
        "Role": {
          "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const { DynamoDBClient } = require(\"@aws-sdk/client-dynamodb\");",
                "const { DynamoDBDocumentClient, PutCommand } = require(\"@aws-sdk/lib-dynamodb\");",
                "const { CognitoIdentityProviderClient, AdminAddUserToGroupCommand } = require(\"@aws-sdk/client-cognito-identity-provider\");",
                "",
                "const dynamoClient = new DynamoDBClient({});",
                "const dynamoDb = DynamoDBDocumentClient.from(dynamoClient);",
                "const cognitoClient = new CognitoIdentityProviderClient({});",
                "",
                "exports.handler = async (event) => {",
                "  console.log(\"Event:\", JSON.stringify(event, null, 2));",
                "",
                "  try {",
                "    const userAttributes = event.request.userAttributes;",
                "    const username = event.userName;",
                "    const userPoolId = event.userPoolId;",
                "",
                "    if (!userAttributes.sub || !userAttributes.email || !userAttributes.name || !userAttributes.family_name || !username) {",
                "      console.error(\"Missing required user attributes or username\");",
                "      return event;",
                "    }",
                "",
                "    const newUser = {",
                "      userId: userAttributes.sub,",
                "      email: userAttributes.email,",
                "      name: userAttributes.name,",
                "      family_name: userAttributes.family_name,",
                "      username: username,",
                "      bookedFlights: []",
                "    };",
                "",
                "    await dynamoDb.send(new PutCommand({",
                "      TableName: \"Users\",",
                "      Item: newUser",
                "    }));",
                "    console.log(\"✅ User added to DynamoDB:\", newUser);",
                "",
                "    await cognitoClient.send(new AdminAddUserToGroupCommand({",
                "      UserPoolId: userPoolId,",
                "      Username: username,",
                "      GroupName: 'Users'",
                "    }));",
                "    console.log(\"✅ User added to Cognito group: Users\");",
                "",
                "    return event;",
                "  } catch (error) {",
                "    console.error(\"❌ Error:\", error);",
                "    throw error;",
                "  }",
                "};"
              ]
            ]
          }
        }
      }
    },



    "UserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": "CloudTripUserPool",
        "UsernameConfiguration": { "CaseSensitive": false },
        "UsernameAttributes": [ "email" ],
        "AutoVerifiedAttributes": [ "email" ],
        "LambdaConfig": {
          "PostConfirmation": { "Fn::GetAtt": [ "UserPoolTriggerLambda", "Arn" ] }
        },
        "Schema": [
          {
            "Name": "email",
            "Required": true,
            "Mutable": true
          },
          {
            "Name": "name",
            "Required": true,
            "Mutable": true
          },
          {
            "Name": "family_name",
            "Required": true,
            "Mutable": true
          }
        ],
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 8,
            "RequireUppercase": true,
            "RequireLowercase": true,
            "RequireNumbers": true,
            "RequireSymbols": false
          }
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": false
        },
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_email",
              "Priority": 1
            }
          ]
        }
      }
    },

    "UserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": "CloudTripClient",
        "UserPoolId": { "Ref": "UserPool" },
        "GenerateSecret": false,
        "ExplicitAuthFlows": [
          "ALLOW_USER_PASSWORD_AUTH",
          "ALLOW_USER_SRP_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH",
          "ALLOW_ADMIN_USER_PASSWORD_AUTH",
          "ALLOW_CUSTOM_AUTH",
          "ALLOW_USER_AUTH"
        ],
        "SupportedIdentityProviders": [ "COGNITO" ],
        "CallbackURLs": [ "https://cloudtrip3.s3.us-east-1.amazonaws.com/index.html" ],
        "LogoutURLs": [ "https://cloudtrip3.s3.us-east-1.amazonaws.com/index.html" ],
        "AllowedOAuthFlows": [ "code" ],
        "AllowedOAuthScopes": [ "openid", "email", "profile" ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AccessTokenValidity": 60,
        "IdTokenValidity": 60,
        "RefreshTokenValidity": 5,
        "TokenValidityUnits": {
          "AccessToken": "minutes",
          "IdToken": "minutes",
          "RefreshToken": "days"
        },
        "PreventUserExistenceErrors": "ENABLED"
      }
    },

    "UserGroupAdmins": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {
        "GroupName": "Admins",
        "UserPoolId": { "Ref": "UserPool" },
        "Description": "Admin group for CloudTrip",
        "RoleArn": {
          "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        }
      }
    },

    "UserGroupUsers": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {
        "GroupName": "Users",
        "UserPoolId": { "Ref": "UserPool" },
        "Description": "Users group for CloudTrip",
        "RoleArn": {
          "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        }
      }
    },

    "UserPoolDomain": {
      "Type": "AWS::Cognito::UserPoolDomain",
      "Properties": {
        "Domain": "cloudtripuserpool",
        "UserPoolId": { "Ref": "UserPool" }
      }
    },


    "RestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "FlightsApi"
      }
    },
    "RestApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "FlightsGetMethod",
        "FlightsPostMethod",
        "FlightsPutMethod",
        "FlightsDeleteMethod",
        "FlightsOptionsMethod",
        "UsersGetMethod",
        "UsersPutMethod",
        "UsersDeleteMethod",
        "UsersOptionsMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "StageName": "prod"
      }
    },
    "FlightsResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "RestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "flights"
      }
    },
    "FlightsGetMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "FlightsResource"
        },
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getFlights/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          },
          {
            "StatusCode": "400",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          },
          {
            "StatusCode": "500",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "FlightsPostMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "FlightsResource"
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:postFlights/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          },
          {
            "StatusCode": "400",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          },
          {
            "StatusCode": "500",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "FlightsPutMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "FlightsResource"
        },
        "HttpMethod": "PUT",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:putFlights/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          },
          {
            "StatusCode": "400",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          },
          {
            "StatusCode": "500",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "FlightsDeleteMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "FlightsResource"
        },
        "HttpMethod": "DELETE",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:deleteFlights/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          },
          {
            "StatusCode": "400",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          },
          {
            "StatusCode": "500",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "FlightsOptionsMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "FlightsResource"
        },
        "HttpMethod": "OPTIONS",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": ""
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'*'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "LambdaInvokePermissionGet": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "GetFlightsLambda",
      "Properties": {
        "FunctionName": { "Ref": "GetFlightsLambda" },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/flights"
        }
      }
    },
    "LambdaInvokePermissionPost": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "PostFlightsLambda",
      "Properties": {
        "FunctionName": { "Ref": "PostFlightsLambda" },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/flights"
        }
      }
    },
    "LambdaInvokePermissionPut": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "PutFlightsLambda",
      "Properties": {
        "FunctionName": { "Ref": "PutFlightsLambda" },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/PUT/flights"
        }
      }
    },
    "LambdaInvokePermissionDelete": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "DeleteFlightsLambda",
      "Properties": {
        "FunctionName": { "Ref": "DeleteFlightsLambda" },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/DELETE/flights"
        }
      }
    },
    "UsersResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "RestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "users"
      }
    },
    "UsersGetMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "UsersResource"
        },
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getUsers/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "UsersPutMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "RestApi" },
        "ResourceId": { "Ref": "UsersResource" },
        "HttpMethod": "PUT",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:putUsers/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          },
          {
            "StatusCode": "400",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          },
          {
            "StatusCode": "500",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },

    "UsersDeleteMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "UsersResource"
        },
        "HttpMethod": "DELETE",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:deleteUserBooking/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          },
          {
            "StatusCode": "400",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          },
          {
            "StatusCode": "500",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },

    "UsersOptionsMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "UsersResource"
        },
        "HttpMethod": "OPTIONS",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": ""
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'*'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,PUT,DELETE,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "LambdaInvokePermissionGetUsers": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "GetUsersLambda",
      "Properties": {
        "FunctionName": { "Ref": "GetUsersLambda" },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/users"
        }
      }
    },
    "LambdaInvokePermissionPutUsers": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "PutUsersLambda",
      "Properties": {
        "FunctionName": { "Ref": "PutUsersLambda" },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/PUT/users"
        }
      }
    },
    "LambdaInvokePermissionDeleteUserBooking": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": "deleteUserBooking",
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/DELETE/users"
        }
      }
    },

    "PLOCAPIWebACL": {
      "Type": "AWS::WAFv2::WebACL",
      "Properties": {
        "Name": "PLOCAPIWebACL",
        "Scope": "REGIONAL",
        "DefaultAction": {
          "Allow": {}
        },
        "VisibilityConfig": {
          "SampledRequestsEnabled": true,
          "CloudWatchMetricsEnabled": true,
          "MetricName": "PLOCAPIWebACL"
        },
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "Priority": 1,
            "OverrideAction": {
              "None": {}
            },
            "Statement": {
              "ManagedRuleGroupStatement": {
                "VendorName": "AWS",
                "Name": "AWSManagedRulesCommonRuleSet"
              }
            },
            "VisibilityConfig": {
              "SampledRequestsEnabled": true,
              "CloudWatchMetricsEnabled": true,
              "MetricName": "CommonRuleSet"
            }
          },
          {
            "Name": "AWS-AWSManagedRulesSQLiRuleSet",
            "Priority": 2,
            "OverrideAction": {
              "None": {}
            },
            "Statement": {
              "ManagedRuleGroupStatement": {
                "VendorName": "AWS",
                "Name": "AWSManagedRulesSQLiRuleSet"
              }
            },
            "VisibilityConfig": {
              "SampledRequestsEnabled": true,
              "CloudWatchMetricsEnabled": true,
              "MetricName": "SQLiRuleSet"
            }
          }
        ]
      }
    },
    "WebACLAssociation": {
      "Type": "AWS::WAFv2::WebACLAssociation",
      "DependsOn": "RestApiDeployment",
      "Properties": {
        "ResourceArn": {
          "Fn::Sub": "arn:aws:apigateway:${AWS::Region}::/restapis/${RestApi}/stages/prod"
        },
        "WebACLArn": {
          "Fn::GetAtt": [ "PLOCAPIWebACL", "Arn" ]
        }
      }
    },

    "FlightBookingTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "FlightBookingTopic"
      }
    }
  },

  "Outputs": {
    "S3WebsiteURL": {
      "Value": {
        "Fn::GetAtt": [ "StaticWebsiteBucket", "WebsiteURL" ]
      }
    },
    "UserPoolId": {
      "Description": "Change in auth.js",
      "Value": { "Ref": "UserPool" }
    },
    "UserPoolClientId": {
      "Description": "Change in auth.js",
      "Value": { "Ref": "UserPoolClient" }
    },
    "ApiInvokeUrl": {
      "Value": {
        "Fn::Sub": "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
      },
      "Description": "Change in sharedApi.js"
    }
  }
}